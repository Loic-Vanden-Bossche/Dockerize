openapi: 3.0.0
info:
  version: 1.0.0
  title: "Express boilerplate"
  description: >-
    "Basic express server with two-levels authentication"
security:
  - levels:
      - "admin"
      - "user:own"
      - "user"
paths:
  /login:
    post:
      tags: 
        - "Auth"
      summary: "Authenticate a user"
      operationId: "login"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                password:
                  type: "string"
      responses:
        400:
          description: "Authentication failed"
        200:
          description: "User successfully authenticated"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  token:
                    type: "string"
  /profile:
    get:
      tags: 
        - "Auth"
      summary: "Fetch profile of authenticated user"
      responses:
        200:
          description: "User profile successfully fetched"
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - levels:
          - "user"
  /users:
    get:
      tags:
        - "Users"
      summary: "List all existing users"
      operationId: "listUsers"
      responses:
        200:
          description: "User successfully created"
          content: 
            application/json:
              schema:
                type: "array"
                items: 
                  $ref: "#/components/schemas/User"
      security:
      - levels:
        - "admin"
    post:
      tags:
        - "Users"
      summary: "Add a new user"
      operationId: "addUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPayload"
        required: true
      responses:
        400:
          description: "Email already used"
        422:
          description: "Payload validation failed"
        200:
          description: "User successfully created"
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
      - levels:
        - "admin"
  /users/{id}:
    get:
      tags:
        - "Users"
      summary: "Get existing user"
      operationId: "readUser"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "Invalid ID given"
        404:
          description: "User with given ID does not exist"
        200:
          description: "User successfully fetched"
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
      - levels:
        - "admin"
        - "user:own"
    put:
      tags:
        - "Users"
      summary: "Update existing user"
      operationId: "updateUser"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPayload"
        required: true
      responses:
        400:
          description: "Invalid ID given"
        404:
          description: "User with given ID does not exist"
        422:
          description: "Payload validation failed"
        200:
          description: "User successfully updated"
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
      - levels:
        - "admin"
        - "user:own"
    delete:
      tags:
        - "Users"
      summary: "Delete existing user"
      operationId: "deleteUser"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "Invalid ID given"
        404:
          description: "User with given ID does not exist"
        200:
          description: "User successfully deleted"
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - levels:
        - "admin"
        - "user:own"
components:
  schemas:
    UserPayload:
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
    User:
      type: "object"
      properties:
        _id:
          type: "string"
        name:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT